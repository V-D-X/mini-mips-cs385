# GitHub Actions workflow for testing MIPS CPU Verilog code.
# Runs whenever code is pushed to `main` or a pull request (PR) targets `main`.

name: MIPS CPU CI/CD Pipeline

on:
  # Run CI/CD pipeline on pushes to main
  push:
    branches:
      - main

  # Run CI/CD pipeline on pull requests into main
  pull_request:
    branches:
      - main

  # Allow manual triggering of this workflow
  workflow_dispatch:

jobs:
  build:
    # Use the latest Ubuntu environment
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Install necessary dependencies (Verilog tools)
      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y verilator iverilog gtkwave

      # 3Ô∏è‚É£ Run Verilator linting for syntax & logic issues
      - name: Run Verilator Linting (Strict)
        run: |
          verilator --lint-only -Wall -Wpedantic -Wno-fatal --trace --assert $(find src -name "*.v")

      # 4Ô∏è‚É£ Run Verilog formatting check (Optional)
      - name: Run Verilog Formatting Check
        run: |
          if command -v verilog_format &> /dev/null; then
            verilog_format -i $(find src -name "*.v")
          else
            echo "‚ö†Ô∏è Verilog formatting tool not installed, skipping..."
          fi

      # 5Ô∏è‚É£ Find and run ALL Verilog testbenches in `test/`
      - name: Find and Run All Tests
        run: |
          test_failures=0  # Initialize failure counter
          
          # Loop through all test files in `test/`
          for test_file in $(find test -name "*.v"); do
            test_name=$(basename "$test_file" .v)
            echo "üöÄ Running test: $test_name"

            # Compile testbench
            iverilog -o testbench_$test_name -I src "$test_file"

            # Run the testbench; if it fails, increment failure count
            vvp testbench_$test_name || test_failures=$((test_failures+1))
          done

          # Save failure count as an environment variable
          echo "Total test failures: $test_failures"
          echo "TEST_FAILURES=$test_failures" >> $GITHUB_ENV

      # 6Ô∏è‚É£ Ensure tests pass on `main`; allow failures on feature branches
      - name: Enforce Test Success on Protected Branches
        run: |
          # Get the current branch name
          BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')

          # Enforce strict test passing only on `main`
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "üî¥ Commit is on the protected `main` branch. Enforcing test success."

            if [ "$TEST_FAILURES" -gt 0 ]; then
              echo "‚ùå CI/CD failed due to test failures on `main`!"
              exit 1  # Fail the workflow
            fi
          else
            echo "üü° Commit is on a feature branch ($BRANCH_NAME). Allowing test failures for debugging."
          fi
