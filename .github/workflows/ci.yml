# GitHub Actions workflow for testing MIPS CPU Verilog code.
# Runs whenever code is pushed to `main` or a pull request (PR) targets `main`.

name: MIPS CPU CI/CD Pipeline

on:
  # Run CI/CD pipeline on pushes to main
  push:
    branches:
      - main

  # Run CI/CD pipeline on pull requests into main
  pull_request:
    branches:
      - main

  # Allow manual triggering of this workflow
  workflow_dispatch:

jobs:
  linting:
    runs-on: ubuntu-latest
    container: mjccdev/verilog-test-env
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Run Verilator Linting
        run: verilator --lint-only -Wall -Wpedantic -Wno-fatal --trace --assert $(find src -name "*.v")

  formatting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Run Verilog Formatting Check
        run: |
            verilog_format -i $(find src -name "*.v")

  testing:
    runs-on: ubuntu-latest
    needs: [linting, formatting]  # Run after linting & formatting
    container: mjccdev/verilog-test-env
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      # Run all testbenches in the test/ directory
      - name: Run Verilog Testbenches
        run: |
          test_failures=0  # Initialize failure counter
          
          # Loop through all test files in `test/`
          for test_file in $(find test -name "*.v"); do
            test_name=$(basename "$test_file" .v)
            echo "Running test: $test_name"
            
            # Compile testbench
            iverilog -o testbench_$test_name -I src "$test_file"
            
            # Run testbench; increment failure count if it fails
            vvp testbench_$test_name || test_failures=$((test_failures+1))
          done
          
          # Save failure count as an environment variable
          echo "TEST_FAILURES=$test_failures" >> $GITHUB_ENV

      # Ensure tests pass on `main`, but allow failures on feature branches
      - name: Enforce Test Success on Protected Branches
        run: |
          # Get the current branch name
          BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')

          # Enforce strict test passing only on `main`
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "Commit is on the protected `main` branch. Enforcing test success."
            if [ "$TEST_FAILURES" -gt 0 ]; then
              echo "CI/CD failed due to test failures on `main`"
              exit 1  # Fail the workflow
            fi
          else
            echo "Commit is on a feature branch ($BRANCH_NAME). Allowing test failures for debugging."
          fi