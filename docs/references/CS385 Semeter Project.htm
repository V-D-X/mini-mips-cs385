<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0132)https://ct-ccsu.blackboard.com/bbcswebdav/courses/CCSU40442.201540/CS385-Semester-Project.html -->
<html><head> 
  <meta content="IE=5.0000" http-equiv="X-UA-Compatible"> 
  <title>CS385 Semeter Project</title> 
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
  <meta name="GENERATOR" content="MSHTML 11.00.9600.18161"> 
 </head> 
 <body class="vsc-initialized">
<h3>CS385 Semester Project: Building a mini MIPS machine</h3><p><b><span style="text-decoration: underline;">Note that this project is a teamwork of 2-3 students. One submission is required and all team members receive the same grade.</span></b></p><p><b><span style="text-decoration: underline;">Description:</span></b>
 Design a simplified version of a MIPS machine and write a Verilog 
program that describes its structure and simulates its functioning. Use 
gate-level modeling for all components unless otherwise specified. The 
machine should include the following components:</p><ol><li><span style="text-decoration: underline;">General purpose registers (register file):</span> 4 registers, 16-bit long, numbered 0 - 3. Register $0 must contain 0 (read-only). Implemented in behavioral modeling.</li><li><span style="text-decoration: underline;">Other registers:</span> 16-bit program counter, pipeline registers. Implemented by reg vectors in Verilog.</li><li><span style="text-decoration: underline;">Istruction Memory.</span> Word size: 16 bits, word addressed, size: 1024 bytes. Implemented by reg array in Verilog.</li><li><span style="text-decoration: underline;">Data Memory.</span> Word size: 16 bits, word addressed, size: 1024 bytes. Implemented by reg array in Verilog..</li><li><span style="text-decoration: underline;">ALU:</span> 16-bit data, 4-bit control. Functions: and, or, nor, nand, add, sub, slt, Zero. Implemented at gate-level.</li><li><span style="text-decoration: underline;">Main Control unit:</span> Behavioral model.</li><li><span style="text-decoration: underline;">Branch Control unit:</span> Gate-level model.</li><li><span style="text-decoration: underline;">Other components necessary to connect the main components:</span> multiplexes implemented at gate-level, sign-extend in behavioral modeling.&nbsp;</li></ol><p><b><span style="text-decoration: underline;">Instruction set</span></b></p><table border="1" width="30%" height="470" style="border-collapse: collapse; width: 26.9204%; height: 250px; border-style: solid;"><caption></caption><tbody><tr><td style="width: 46.1665%; text-align: left;"><b>Instruction</b></td><td style="width: 53.6457%; text-align: left;"><b>Opcode</b></td></tr><tr><td style="width: 46.1665%;">add</td><td style="width: 53.6457%;">0000</td></tr><tr><td style="width: 46.1665%;">sub</td><td style="width: 53.6457%;">0001</td></tr><tr><td style="width: 46.1665%;">and</td><td style="width: 53.6457%;">0010</td></tr><tr><td style="width: 46.1665%;">or</td><td style="width: 53.6457%;">0011</td></tr><tr><td style="width: 46.1665%;">nor</td><td style="width: 53.6457%;">0100</td></tr><tr><td style="width: 46.1665%;">nand</td><td style="width: 53.6457%;">0101</td></tr><tr><td style="width: 46.1665%;">slt</td><td style="width: 53.6457%;">0110</td></tr><tr><td style="width: 46.1665%;">addi</td><td style="width: 53.6457%;">0111</td></tr><tr><td style="width: 46.1665%;">lw</td><td style="width: 53.6457%;">1000</td></tr><tr><td style="width: 46.1665%;">sw</td><td style="width: 53.6457%;">1001</td></tr><tr><td style="width: 46.1665%;">beq</td><td style="width: 53.6457%;">1010</td></tr><tr><td style="width: 46.1665%;">bne</td><td style="width: 53.6457%;">1011</td></tr></tbody></table><p><b><span style="text-decoration: underline;">Instruction format</span></b></p><p>R-format (add, sub, and, or, nor, nand, slt)</p><table border="1" style="border-collapse: collapse; width: 26.3529%;"><tbody><tr><td style="width: 16.8627%;">op</td><td style="width: 13.3333%;">rs</td><td style="width: 10.5882%;">rt</td><td style="width: 14.1176%;">rd</td><td style="width: 32.549%;">unused</td></tr><tr><td style="width: 16.8627%;">4</td><td style="width: 13.3333%;">2</td><td style="width: 10.5882%;">2</td><td style="width: 14.1176%;">2</td><td style="width: 32.549%;">6</td></tr></tbody></table><p>I-format (addi, lw, sw, beq, bne)</p><table border="1" style="border-collapse: collapse; width: 32.5348%;"><tbody><tr><td style="width: 19.0166%;">op</td><td style="width: 16.2999%;">rs</td><td style="width: 13.5833%;">rt</td><td style="width: 50.5297%;">address / value</td></tr><tr><td style="width: 19.0166%;">4</td><td style="width: 16.2999%;">2</td><td style="width: 13.5833%;">2</td><td style="width: 50.5297%;">8</td></tr></tbody></table><p><b style="font-family: inherit; font-style: inherit;"><span style="text-decoration: underline;">Extra credit (maximum 5 points)</span></b>.
 Implement one of the following: additional MIPS instructions (e.g. 
jump), improvements of the pipeline (forwarding or stalling), a data 
cache. For implementing the data cache see <a href="http://www.cs.ccsu.edu/~markov/ccsu_courses/cache.vl" target="_blank" rel="noopener">cache.vl</a>, <a href="http://www.cs.ccsu.edu/~markov/ccsu_courses/cache2.vl" target="_blank" rel="noopener">cache2.vl</a>.&nbsp;</p><p><b><span style="text-decoration: underline;">Testing:</span></b>
 To test the MIPS machine write a simple program that includes 
arithmetic and logic (add, addi, sub, and, or, nor, nand, slt), data 
transfer (lw, sw) and branch (beq, bne) instructions. Use immediate 
arithmetic instruction (addi) to introduce numeric constants in your 
program. <b>Include in your report:</b></p><ol><li>The assembly <b>source of the test program</b> with comments explaining the algorithm.&nbsp;</li><li>The <b>machine code</b> (the contents of the memory)</li><li><b>Simulation results</b>
 obtained by running the Verilog program. To monitor the execution of 
the test program for each instruction display the value at the write 
data input of the register file. For the&nbsp;branch instructions show 
results from both decisions (<span style="text-decoration: underline;">branch taken and branch not taken</span>).&nbsp;Show the PC in the simulation output. For the pipelined processor&nbsp;show results with and without nop's that <span style="text-decoration: underline;">demonstarte the pipeline hazards</span>.</li></ol><p><b><span style="text-decoration: underline;">Progress reports:</span></b>
 Three progress reports and a final report describing the current status
 of the project and including the design of the major components of the 
MIPS machine should be submitted. Each report should be a <span style="text-decoration: underline;">single Word or PDF document</span> and must include:</p><ol><li>The names of the team members and the tasks that each one accomplished.</li><li>A detailed description of the <span style="text-decoration: underline;">instruction set architecture</span> of the current version of the CPU (instruction codes, formats, meaning).&nbsp;</li><li><span style="text-decoration: underline;">Logic </span><span style="text-decoration: underline;">diagrams</span> for the CPU, ALU (16-bit and 1-bit), and branch control unit, and <span style="text-decoration: underline;">truth table</span>&nbsp;for the control unit. The diagrams and tables must use labels for <span style="text-decoration: underline;">all</span> components and data/control signals corresponding <span style="text-decoration: underline;">exactly</span> to the modules, input/outputs and wire names used in the Verilog code.</li><li>The <span style="text-decoration: underline;">Verilog source code</span> including <span style="text-decoration: underline;">comment</span> for each module defined or used.</li><li>The <span style="text-decoration: underline;">source</span> and the <span style="text-decoration: underline;">machine language translation of the</span><span style="text-decoration: underline;">&nbsp;test program</span> with comment showing the result that each instruction produces.</li><li><span style="text-decoration: underline;">Test results</span> showing the correct functioning of the CPU by running the test program.</li></ol><p>The schedule for the progress reports is the following:</p><ol><li><strong>Progress Report 1 due on March 6:</strong> A simpilfied single-cycle datapath capable of executing all <span style="text-decoration: underline;">R-type</span> and <span style="text-decoration: underline;">immediate arithmetic</span> instructions (<span style="text-decoration: underline;">add, sub, and, or, nor, nand, slt, addi</span>). Major components: Instruction memory, ALU, and Register File. Use template files: <a target="_blank" href="http://www.cs.ccsu.edu/~markov/ccsu_courses/ALU4-mixed.vl" rel="noopener">ALU4-mixed.vl</a>&nbsp;(rewrite it at gate-level and extend it to 16 bit), <a target="_blank" href="http://www.cs.ccsu.edu/~markov/ccsu_courses/mips-regfile.vl" rel="noopener">mips-regfile.vl</a> (adjust the number and size of the registers). Use also the behavioral implementation <a href="http://www.cs.ccsu.edu/~markov/ccsu_courses/mips-r-type_addi.vl" target="_blank" rel="noopener">mips-r-type_addi.vl</a> and make the necessary changes/additions. For testing use the test program, which is part of <a href="http://www.cs.ccsu.edu/~markov/ccsu_courses/mips-r-type_addi.vl" target="_blank" rel="noopener">mips-r-type_addi.vl</a> <span style="color: #626262;">recompiled for the project 16-bit architecture</span> and follow the requirements given in section "Testing".</li><li><strong><strong>Progress Report 2 due on TBA:</strong> </strong>Complete
 single-cycle datapath. Implement all instructions and run a complete 
test program as explained in section "Testing". Use the&nbsp;behavioral 
implementation <a href="http://www.cs.ccsu.edu/~markov/ccsu_courses/mips-simple.vl" target="_blank" rel="noopener">mips-simple.vl</a>, and make the necessary changes/additions. For testing use the test program from <a href="http://www.cs.ccsu.edu/~markov/ccsu_courses/mips-simple.vl" target="_blank" rel="noopener">mips-simple.vl</a> <span style="color: #626262;">recompiled for the project 16-bit architecture</span> and extended with the <b>bne</b> instruction and run it with different data to <span style="text-decoration: underline;">simulate both branch decisions</span> (taken and not taken). Show the PC in the simulation output.</li><li><strong>Progress Report 3 due on TBA:</strong> Using the architecture and the instruction format for the 16-bit CPU described in the Semester Project design and implement a <span style="text-decoration: underline;">3-stage pipelined datapath</span><span style="color: #626262;"> capable of executing </span>all R-type<span style="font-size: 13.3333px;"> and </span><span style="text-decoration: underline;">immediate arithmetic</span><span style="font-size: 13.3333px;"> instructions (</span><span style="text-decoration: underline;">add, sub, and, or, nor, nand, slt, addi</span><span style="font-size: 13.3333px;">)</span><span style="font-size: 13.3333px;">. The stages are IF, ID and a third stage</span><span style="color: #626262;"> combining EX, MEM and WB stages of the 5-stage standard MIPS pipeline. Use the standard MIPS 3-stage datapath diagram <a href="http://www.cs.ccsu.edu/~markov/ccsu_courses/mips-pipe3.png">mips-pipe3.png</a> and the behavioral model </span><a href="http://www.cs.ccsu.edu/~markov/ccsu_courses/mips-pipe3.vl" target="_blank" rel="noopener">mips-pipe3.vl</a> and make the necessary changes/additions. <span style="color: #626262;">For testing use the test program from </span><a href="http://www.cs.ccsu.edu/~markov/ccsu_courses/mips-pipe3.vl" target="_blank" rel="noopener">mips-pipe3.vl</a><span style="color: #626262;"> and recompile it for the project 16-bit architecture. The test results should include simulations with and without nop's that </span><span style="text-decoration: underline;">demonstarte the pipeline hazards</span><span style="color: #626262;">. The simulation output should s</span>how the PC and the instruction in each pipeline stage.</li><li><strong>Final Peport due on TBA:</strong>&nbsp;Implement the final version of the complete (5-stage)&nbsp;pipelined datapath. Use the pipeline diagram <a href="http://www.cs.ccsu.edu/~markov/ccsu_courses/MIPS-16-Pipeline.pdf" target="_blank" rel="noreferrer noopener">MIPS-16-Pipeline.pdf</a>, and the&nbsp;behavioural&nbsp;model <a href="http://www.cs.ccsu.edu/~markov/ccsu_courses/mips-pipe.vl" target="_blank" rel="noopener">mips-pipe.vl</a>, and make the necessary changes according to the specifications of the <a href="https://alt-57853691332dd.blackboard.com/bbcswebdav/pid-3366646-dt-content-rid-56193344_1/courses/CCSU40406.202540/CCSU10334.201910_ImportedContent_20180826043446/CS385%20Semester%20Project.html" target="_blank" rel="noopener">Semester Project.</a> Use the test program from&nbsp;<a href="http://www.cs.ccsu.edu/~markov/ccsu_courses/mips-pipe.vl" target="_blank" rel="noopener">mips-pipe.vl</a> and follow the requirements given in section "Testing".&nbsp;</li></ol>
</body></html>